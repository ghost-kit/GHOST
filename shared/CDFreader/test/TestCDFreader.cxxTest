#ifndef TESTCDFREADER_H
#define TESTCDFREADER_H

#include "CDFreader.h"
#include "String"
#include <QString>

#include <cxxtest/TestSuite.h>
#include <cxxtest/GlobalFixture.h>
#include <cxxtest/ErrorPrinter.h>


using namespace std;

#define testFile "STA_L1_MAGB_RTN-20100101T000000Z-20100102T000000Z.cdf"
#define CXXTEST_HAVE_EH
#define CXXTEST_ABORT_TEST_ON_FAIL


class TestCDFreader : public CxxTest::TestSuite
{
public:

    void testCDFreaderConstruction(void)
    {
        //make the cdfDataReader object
        CDFr::CDFreader *reader = new CDFr::CDFreader(testFile);

        //check that it opened
        TS_TRACE("Testing Object Construction");
        TS_ASSERT(!reader->hasError());

        //check that the loaded data is correct...
        TS_ASSERT_EQUALS(reader->getFormat(), CDFr_SINGLE_FILE);
        TS_ASSERT_EQUALS(reader->getEncoding(), CDFr_NETWORK_ENCODING);
        TS_ASSERT_EQUALS(reader->getNumberVariables(), 5);
        TS_ASSERT_EQUALS(reader->getNumberGlobalAttributes(), 22);
        TS_ASSERT_EQUALS(reader->getCompressionType(), CDFr_NO_COMPRESSION);
        TS_ASSERT_EQUALS(reader->getChecksum(), CDFr_NO_CHECKSUM);

        //check variable attribute
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getNumberAtts(), 11);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getNumberAtts(), 14);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getNumberAtts(), 12);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getNumberAtts(), 6);
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->getNumberAtts(), 4);

    }


    void testCDFreaderVarsExist(void)
    {
        //make the cdfDataReader object
        CDFr::CDFreader *reader = new CDFr::CDFreader(testFile);

        //check existence for Variables
        //check variabls
        TS_ASSERT(reader->variableExists(QString("Epoch")));
        TS_ASSERT(reader->variableExists(QString("BFIELD")));
        TS_ASSERT(reader->variableExists(QString("MAGFLAGUC")));
        TS_ASSERT(reader->variableExists(QString("CART_LABL_1")));
        TS_ASSERT(reader->variableExists(QString("metavar0")));

    }


    void testCDFreaderAttsExist(void)
    {
        //make the cdfDataReader object
        CDFr::CDFreader *reader = new CDFr::CDFreader(testFile);

        //check existence for Attributes

        //Epoch
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("FIELDNAM"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("CATDESC"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("DICT_KEY"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("FILLVAL"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("LABLAXIS"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("UNITS"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("VALIDMIN"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("VALIDMAX"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("VAR_TYPE"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("VAR_NOTES"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->attributeExists("DIM_SIZES"), true);


        //BField
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("FIELDNAM"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("CATDESC"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("DEPEND_0"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("DEPEND_1"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("DISPLAY_TYPE"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("FILLVAL"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("FORMAT"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("LABL_PTR_1"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("UNITS"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("VALIDMIN"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("VALIDMAX"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("VAR_TYPE"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("SCALETYP"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->attributeExists("DIM_SIZES"), true);


        //MagFlagUC
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("FIELDNAM"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("CATDESC"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("DEPEND_0"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("FILLVAL"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("FORMAT"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("LABLAXIS"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("VALIDMIN"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("VALIDMAX"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("VAR_TYPE"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("SCALETYP"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("VAR_NOTES"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->attributeExists("DIM_SIZES"), true);


        //CART_LABL_1
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("FIELDNAM"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("CATDESC"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("DICT_KEY"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("FORMAT"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("VAR_TYPE"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->attributeExists("DIM_SIZES"), true);

        //metavar0
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->attributeExists("FIELDNAM"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->attributeExists("CATDESC"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->attributeExists("FORMAT"), true);
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->attributeExists("VAR_TYPE"), true);

    }


    void testCDFreaderAttsValuesCorrect(void)
    {
        //make the cdfDataReader object
        CDFr::CDFreader *reader = new CDFr::CDFreader(testFile);

        //check values for Attributes
        //Epoch
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("FIELDNAM")->getAttributeItem(0).toString(), QString("Epoch"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("CATDESC")->getAttributeItem(0).toString(), QString("Time since 0 AD"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("DICT_KEY")->getAttributeItem(0).toString(), QString("time>epoch"));
        TS_ASSERT_DELTA(reader->getVariable(QString("Epoch"))->getAttirbute("FILLVAL")->getAttributeItem(0).toFloat(), -1.0e31f, 1e-4);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("LABLAXIS")->getAttributeItem(0).toString(), QString("Epoch"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("UNITS")->getAttributeItem(0).toString(), QString("ms"));
        TS_ASSERT_DELTA(reader->getVariable(QString("Epoch"))->getAttirbute("VALIDMIN")->getAttributeItem(0).toFloat(), 62798369390592.2268f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("Epoch"))->getAttirbute("VALIDMAX")->getAttributeItem(0).toFloat(), 63776590135296.4660f, 1e-4);
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("VAR_TYPE")->getAttributeItem(0).toString(), QString("support_data"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("VAR_NOTES")->getAttributeItem(0).toString(), QString("Interval-centered time tag"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("Epoch"))->getAttirbute("DIM_SIZES")->getAttributeItem(0).toInt(), 0);



        //BField
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("FIELDNAM")->getAttributeItem(0).toString(), QString("B Field in RTN Coordinates"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("CATDESC")->getAttributeItem(0).toString(), QString("Magnetic field vector in RTN coordinates from the IMPACT/MAG instrument."));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("DEPEND_0")->getAttributeItem(0).toString(), QString("Epoch"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("DEPEND_1")->getAttributeItem(0).toString(), QString("CART_LABL_1"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("DISPLAY_TYPE")->getAttributeItem(0).toString(), QString("time_series"));
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getAttirbute("FILLVAL")->getAttributeItem(0).toFloat(), -1.0e+31f, 1e-4);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("FORMAT")->getAttributeItem(0).toString(), QString("E13.6"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("LABL_PTR_1")->getAttributeItem(0).toString(), QString("metavar0"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("UNITS")->getAttributeItem(0).toString(), QString("nT"));
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getAttirbute("VALIDMIN")->getAttributeItem(0).toFloat(), -10000.0f,1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getAttirbute("VALIDMAX")->getAttributeItem(0).toFloat(), 10000.0f, 1e-4);
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("VAR_TYPE")->getAttributeItem(0).toString(), QString("data"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("SCALETYP")->getAttributeItem(0).toString(), QString("linear"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getAttirbute("DIM_SIZES")->getAttributeItem(0).toInt(), 4);


        //MagFlagUC
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("FIELDNAM")->getAttributeItem(0).toString(),QString("MAGFLAGUC"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("CATDESC")->getAttributeItem(0).toString(), QString("[HIGHLY ENCODED VALUES] IMPACT/MAG status flag"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("DEPEND_0")->getAttributeItem(0).toString(), QString("Epoch"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("FILLVAL")->getAttributeItem(0).toUInt(), 4294967295);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("FORMAT")->getAttributeItem(0).toString(), QString("I8"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("LABLAXIS")->getAttributeItem(0).toString(), QString("MAGFLAGUC"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("VALIDMIN")->getAttributeItem(0).toUInt(), 0);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("VALIDMAX")->getAttributeItem(0).toUInt(), 4294967295);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("VAR_TYPE")->getAttributeItem(0).toString(), QString("data"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("SCALETYP")->getAttributeItem(0).toString(), QString("linear"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("VAR_NOTES")->getAttributeItem(0).toString(), QString("bit 0:3 Mag Error counter.     bit 4:7 Mag Command counter.     bit 8   spare.     bit 9   First.     bit 10  Time.     bit 11  Interface Parity Error (0=OK, 1=Fault).     bit 12  Interface Timeout Error (0=OK, 1=Fault).     bit 13  ADC Cal (0=OFF, 1=ON).     bit 14  In Flight Cal (0=OFF, 1=ON).     bit 15  Range (0=low fields, high sensitivity, 1=high fields, low sen.     bit 16  Calibration (0=old cal, 1=new cal).     bit 17  STEREO STEPPING For X-axis.     bit 18:31 spare"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getAttirbute("DIM_SIZES")->getAttributeItem(0).toInt(), 0);

        //CART_LABL_1
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("FIELDNAM")->getAttributeItem(0).toString(), QString("CART_LABL_1"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("CATDESC")->getAttributeItem(0).toString(), QString("CART_LABL_1"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("DICT_KEY")->getAttributeItem(0).toString(), QString("label"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("FORMAT")->getAttributeItem(0).toString(), QString("a6"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("VAR_TYPE")->getAttributeItem(0).toString(), QString("metadata"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("CART_LABL_1"))->getAttirbute("DIM_SIZES")->getAttributeItem(0).toInt(), 4);

        //metavar0
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->getAttirbute("FIELDNAM")->getAttributeItem(0).toString(), QString("metavar0"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->getAttirbute("CATDESC")->getAttributeItem(0).toString(), QString("Metadata for variable BFIELD and possibly other variables."));
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->getAttirbute("FORMAT")->getAttributeItem(0).toString(), QString("a2"));
        TS_ASSERT_EQUALS(reader->getVariable(QString("metavar0"))->getAttirbute("VAR_TYPE")->getAttributeItem(0).toString(), QString("metadata"));
    }

    void testCDFreaderGetVarValues(void)
    {

        //make the cdfDataReader object
        CDFr::CDFreader *reader = new CDFr::CDFreader(testFile);


        //test BFIELD
        //get a signle element from a variable
        TS_ASSERT_EQUALS(reader->getVariable(QString("BFIELD"))->getDataEntry(0).size(), 4);


        if(reader->getVariable(QString("BFIELD"))->getDataEntry(0).size() < 4)  TS_SKIP("Previous Failures in this test failed. Skipping remainder");

        //complete first record
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(0)[0].toFloat(), 1.023092e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(0)[1].toFloat(), -5.221645e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(0)[2].toFloat(), -1.597383e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(0)[3].toFloat(), 5.555531e+00f, 1e-4);

        //random data points
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(1).first().toFloat(), 1.008296e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(4309).first().toFloat(), 3.571743e-01f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(2468).first().toFloat(), 8.687328e-01f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(10519).first().toFloat(), 2.197906e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(12323).first().toFloat(), 2.551024e+00f, 1e-4);

        //complete final record
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(287193)[0].toFloat(), -9.631263e-01f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(287193)[1].toFloat(), -6.419676e-01f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(287193)[2].toFloat(), 1.948974e+00f, 1e-4);
        TS_ASSERT_DELTA(reader->getVariable(QString("BFIELD"))->getDataEntry(287193)[3].toFloat(), 2.266768e+00f, 1e-4);

        //test MAGFLAGUC
        //get a signle element from a variable
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(0).size(), 1);


        if(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(0).size() < 1)  TS_SKIP("Previous Failures in this test failed. Skipping remainder");

        //complete first record
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(0)[0].toULongLong(), 131408);

        //random data points
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(1).first().toULongLong(), 131408);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(4309).first().toULongLong(), 132576);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(2468).first().toULongLong(), 131376);
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(10519).first().toULongLong(), 131376);

        //complete final record
        TS_ASSERT_EQUALS(reader->getVariable(QString("MAGFLAGUC"))->getDataEntry(287193)[0].toULongLong(), 132448);


    }

};

#endif // TESTCDFREADER_H
